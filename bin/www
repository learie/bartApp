#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');

var debug = require('debug')('bartapi:server');
var http = require('http');
var request = require('request');


var parser = require('xml2json');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */


var bartKey = 'QA4V-P9YD-9P7T-DWE9';
var baseUrl = 'http://api.bart.gov/api/etd.aspx?cmd=etd&orig=';
var stations = ['mont', 'embr', 'woak'];
var i = 0;

var server = http.createServer(app);
var io = require('socket.io')(server);


var WebSocket = require('ws');

var auth = 'Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiI0Yzc4ODE3Mi0xZGVkLTQ1ZGEtOWRhNS0wZmU2OTgxZTZkZGYiLCJzdWIiOiJ0ZXN0Iiwic2NvcGUiOlsidWFhLnJlc291cmNlIiwib3BlbmlkIiwidWFhLm5vbmUiLCJpZS1wZWRlc3RyaWFuLnpvbmVzLjM1MjQ5MDc1LTdlYzItNDQzZS04NWI2LTcyZTEwMGFhMjRkNC51c2VyIl0sImNsaWVudF9pZCI6InRlc3QiLCJjaWQiOiJ0ZXN0IiwiYXpwIjoidGVzdCIsImdyYW50X3R5cGUiOiJjbGllbnRfY3JlZGVudGlhbHMiLCJyZXZfc2lnIjoiY2NmMGU2ODEiLCJpYXQiOjE0NjMwNzA5OTAsImV4cCI6MTQ2MzExNDE5MCwiaXNzIjoiaHR0cHM6Ly8zNmI3NmNhMi1iZDFkLTRhM2MtODk5NS03Y2VjYjU4ZDFmNDEucHJlZGl4LXVhYS5ydW4uYXdzLXVzdzAyLXByLmljZS5wcmVkaXguaW8vb2F1dGgvdG9rZW4iLCJ6aWQiOiIzNmI3NmNhMi1iZDFkLTRhM2MtODk5NS03Y2VjYjU4ZDFmNDEiLCJhdWQiOlsidGVzdCIsInVhYSIsIm9wZW5pZCIsImllLXBlZGVzdHJpYW4uem9uZXMuMzUyNDkwNzUtN2VjMi00NDNlLTg1YjYtNzJlMTAwYWEyNGQ0Il19.hl5UPw1VPLMu0Nwvh9CJMFIA27ib_WSEqYIJ5v9NVS1YJi6g-wcPGymbidWGyAplUvzGxogObIT1uKTfTkrnCU60WGzoCUkChEwXSq2xhEV0Z3zBimZ3Z-TTJRiInClziFF94IdP2xw5uvEIYt0EpxhZJ6GXD7gxGHWmbNSOLuzkR9wxMMAI9DP4n04w8n67X5BCkG0V_yurwqVhxtx8vZb170f0fg6iZX27cS8dw2htw4YnKSKhZ2oksA3jGDEzbwzC3SsDjzPOPjkrlX-odEAsyNylomdgbx0up8JnDZPamP87fQMlrnjczJkLG_QxIa7xE7vMMVEo2Z2IZ8kDpQ';
var zone = '35249075-7ec2-443e-85b6-72e100aa24d4';
var wsurl;


io.on('connection', function(clientSocket) {
  console.log('new client connection');

  var requestLoop = setInterval(function(){
    request({
      url: baseUrl + stations[i] + '&key=' + bartKey,
      method: "GET",
      timeout: 10000,
      followRedirect: false,
      maxRedirects: 10
    },function(error, response, body){
      i === 2 ? i = 0 : i++;
      if(!error){
        var bodyP = JSON.parse(parser.toJson(body));
        clientSocket.emit('bartdata', bodyP);
      }else{
        console.log('error', error);
      }
    });
  }, 6000);


  clientSocket.emit('predix', 'hello');
  request({
    url: 'https://ie-pedestrian.run.aws-usw02-pr.ice.predix.io/v1/assets/1000000027/live-events?event-types=SFIN,SFOUT',
    method: 'GET',
    headers: {
      "authorization": auth,
      "predix-zone-id": zone
    }
  }, function(err, resp, body){
    wsurl = JSON.parse(body).url;
    // console.log(wsurl)

    var headers = {
    "authorization": auth,
    "predix-zone-id": zone,
    "origin": "https://www.predix.io"
    };

    var predixSocket = new WebSocket(wsurl, {headers: headers});

    predixSocket.on('open', function(){
      console.log('socket open, asset 27');
    })

    predixSocket.on('message', function(data){
      if (!data) return;
      var data = JSON.parse(data);
      var eventType = data["event-type"] == 'SFIN' ? 'Entering' : 'Exiting';

      clientSocket.emit('predix', {
        station: 'mont',
        people: data.measures[0].value,
        eventType: eventType
      });
    })
  })

  request({
    url: 'https://ie-pedestrian.run.aws-usw02-pr.ice.predix.io/v1/assets/1000000028/live-events?event-types=SFIN,SFOUT',
    method: 'GET',
    headers: {
      "authorization": auth,
      "predix-zone-id": zone
    }
  }, function(err, resp, body){
    wsurl = JSON.parse(body).url;
    console.log(wsurl)

    var headers = {
      "authorization": auth,
      "predix-zone-id": zone,
      "origin": "https://www.predix.io"
    };

    var predixSocket = new WebSocket(wsurl, {headers: headers});

    predixSocket.on('open', function(){
      console.log('socket open, asset 28');
    })

    predixSocket.on('message', function(data){
      var data = JSON.parse(data);
      var eventType = data["event-type"] == 'SFIN' ? 'Entering' : 'Exiting';
      // console.log('Embarcadero: ' + data.measures[0].value + ' ' + eventType);

      clientSocket.emit('predix', {
        station: 'emba',
        people: data.measures[0].value,
        eventType: eventType
      });
    })
  })

  request({
    url: 'https://ie-pedestrian.run.aws-usw02-pr.ice.predix.io/v1/assets/1000000029/live-events?event-types=SFIN,SFOUT',
    method: 'GET',
    headers: {
      "authorization": auth,
      "predix-zone-id": zone
    }
  }, function(err, resp, body){
    wsurl = JSON.parse(body).url;
    console.log(wsurl)

    var headers = {
    "authorization": auth,
    "predix-zone-id": zone,
    "origin": "https://www.predix.io"
    };

    var predixSocket = new WebSocket(wsurl, {headers: headers});

    predixSocket.on('open', function(){
      console.log('socket open, asset 29');
    })

    predixSocket.on('message', function(data){
      var data = JSON.parse(data);
      var eventType = data["event-type"] == 'SFIN' ? 'Entering' : 'Exiting';
      // console.log('Oakland: ' + data.measures[0].value + ' ' + eventType);

      clientSocket.emit('predix', {
        station: 'west',
        people: data.measures[0].value,
        eventType: eventType
      });
    })
  })

});














server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
